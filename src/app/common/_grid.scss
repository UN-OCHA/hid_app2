/// Grid system
//
// Generate semantic grid columns with these mixins.
//
// Adapted from Bootstrap v4 https://github.com/twbs/bootstrap/tree/v4-dev/scss

@mixin make-container() {
  margin-left: auto;
  margin-right: auto;
  padding-right: ($grid-gutter / 2);
  padding-left:  ($grid-gutter / 2);
  max-width: $max-width;
  @if not $enable-flex {
    @include clearfix();
  }
}

@mixin make-gutters() {
  padding-right: ($grid-gutter / 2);
  padding-left:  ($grid-gutter / 2);
}

@mixin make-row() {
  margin-right: ($grid-gutter  / -2);
  margin-left:  ($grid-gutter  / -2);

  @if $enable-flex {
    display: flex;
    flex-wrap: wrap;
  } @else {
    @include clearfix();
  }
}

@mixin make-col-ready() {
  position: relative;
  min-height: 1px;

  @if $enable-flex {
    width: 100%;
  }
}

@mixin make-col($size, $columns: $grid-columns) {
  @if $enable-flex {
    flex: 0 0 percentage($size / $columns);
    max-width: percentage($size / $columns);
  } @else {
    float: left;
    width: percentage($size / $columns);
  }
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}

@mixin make-grid-columns($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  %grid-column {
    position: relative;
    min-height: 1px;

    @if $enable-flex {
      width: 100%;
    }

    @include make-gutters();
  }

  $breakpoint-counter: 0;
  @each $breakpoint in map-keys($breakpoints) {
    $breakpoint-counter: ($breakpoint-counter + 1);

    .col-#{$breakpoint} {
      @extend %grid-column;
    }

    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @extend %grid-column;
      }
    }
    @include media-query($breakpoint) {
      @if $enable-flex {
        .col-#{$breakpoint} {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }
       .col-#{$breakpoint}-auto {
          flex: 0 0 auto;
          width: auto;
        }
      }

      @for $i from 1 through $columns {
        .col-#{$breakpoint}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      @each $modifier in (pull, push) {
        @for $i from 0 through $columns {
          .#{$modifier}-#{$breakpoint}-#{$i} {
            @include make-col-modifier($modifier, $i, $columns)
          }
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
          .offset-#{$breakpoint}-#{$i} {
            @include make-col-modifier(offset, $i, $columns)
          }
        }
      }
    }
  }
}

.container {
  @include make-container();
}

.row {
  @include make-row();
}

@include make-grid-columns();
